/*
키패트를 누르고 2초내에 다른 키패트를 눌리면 타이머가 2초로 다시 설정됨, 
그 값들을 저장해놨다가 더이상 키패트가 들어오지 않을때 FND에 출력
*/



#include "LPC1768_utility.h"
#include "LPC1768_fnd.h"
#include "lpc17xx_adc.h"
#include "lpc17xx_timer.h"
#include "Keypad.H"

uint8_t Number[8]={0,};
uint16_t adc_value;

void TIMER0_Config(void);
TIM_TIMERCFG_Type TIM_ConfigStruct;
TIM_MATCHCFG_Type TIM_MatchConfigStruct;
int flag=0;
int idx=0;
int i=0;
int j=0;

void clear(){
   LPC_GPIO0->FIOPIN &= ~(1<<4);
   LPC_GPIO0->FIOPIN &= ~(1<<23);
   LPC_GPIO0->FIOPIN &= ~(1<<24);
   LPC_GPIO3->FIOPIN &= ~(1<<25);
   LPC_GPIO3->FIOPIN &= ~(1<<26);
   LPC_GPIO2->FIOPIN &= ~(1<<12);
   LPC_GPIO2->FIOPIN &= ~(1<<13);
   LPC_GPIO0->FIOPIN &= ~(1<<5);
   LPC_GPIO0->FIOPIN &= ~(1<<10);
}

void Keypad_test(){
   uint8_t Keypad_Value=16;
   Keypad_DIR_Input();
   Keypad_Value=Keypad('C');
   if(Keypad_Value !=16){
      flag=0;
      TIM_Cmd(LPC_TIM0,DISABLE);
      Number[idx++]=Keypad_Value;
      TIM_ResetCounter(LPC_TIM0);
      TIM_Cmd(LPC_TIM0,ENABLE);
      Delay(SEC_1/3);
   }
}

int main(void)
{
   // LED
   Led_Init(LED_ALL);

   // FND
   FND_Init();
   EXT_IO_init();
   // TIMER
   TIMER0_Config();
   TIM_Init(LPC_TIM0,TIM_TIMER_MODE,&TIM_ConfigStruct);
   TIM_ConfigMatch(LPC_TIM0,&TIM_MatchConfigStruct);
   NVIC_EnableIRQ(TIMER0_IRQn);
   // Keypad
   Keypad_DIR_Input();
   
   
   while(1){
      Keypad_test();
      if(flag==1){
         clear();
         EXT_IO_B_CS();
         FND_Init();
         flag=2;
      }
      if(flag==2){
         for(j=0;j<5000;j++){
            for(i=0;i<8;i++){
               FND_COM_DATA_Select(i+1,Number[i]);
               Delay(5000);
            }
         }
         flag=0;
         idx=0;
      }
   }
}

void TIMER0_IRQHandler(void){
   TIM_ClearIntPending(LPC_TIM0,TIM_MR0_INT);
   TIM_Cmd(LPC_TIM0,DISABLE);
   flag=1;
}

void TIMER0_Config(void){
   TIM_ConfigStruct.PrescaleOption=TIM_PRESCALE_USVAL;
   TIM_ConfigStruct.PrescaleValue=100;
   TIM_MatchConfigStruct.MatchChannel=0;
   TIM_MatchConfigStruct.IntOnMatch=ENABLE;
   TIM_MatchConfigStruct.ResetOnMatch=ENABLE;
   TIM_MatchConfigStruct.StopOnMatch=DISABLE;
   TIM_MatchConfigStruct.ExtMatchOutputType=TIM_EXTMATCH_NOTHING;
   TIM_MatchConfigStruct.MatchValue=20000;
}